{"ast":null,"code":"/**\n * lucide-react v0.105.0 - ISC\n */\n\nimport { forwardRef, createElement } from 'react';\nimport defaultAttributes from './defaultAttributes.js';\nconst toKebabCase = string => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst createLucideIcon = (iconName, iconNode) => {\n  const Component = forwardRef((_ref, ref) => {\n    let {\n      color = \"currentColor\",\n      size = 24,\n      strokeWidth = 2,\n      children,\n      ...rest\n    } = _ref;\n    return createElement(\"svg\", {\n      ref,\n      ...defaultAttributes,\n      width: size,\n      height: size,\n      stroke: color,\n      strokeWidth,\n      className: `lucide lucide-${toKebabCase(iconName)}`,\n      ...rest\n    }, [...iconNode.map(_ref2 => {\n      let [tag, attrs] = _ref2;\n      return createElement(tag, attrs);\n    }), ...((Array.isArray(children) ? children : [children]) || [])]);\n  });\n  Component.displayName = `${iconName}`;\n  return Component;\n};\nexport { createLucideIcon as default, toKebabCase };","map":{"version":3,"names":["toKebabCase","string","replace","toLowerCase","createLucideIcon","iconName","iconNode","Component","forwardRef","_ref","ref","color","size","strokeWidth","children","rest","createElement","defaultAttributes","width","height","stroke","className","map","_ref2","tag","attrs","Array","isArray","displayName"],"sources":["../../src/createLucideIcon.ts"],"sourcesContent":["import { forwardRef, createElement, ReactSVG, SVGProps } from 'react';\nimport defaultAttributes from './defaultAttributes';\n\ntype IconNode = [elementName: keyof ReactSVG, attrs: Record<string, string>][]\n\nexport type SVGAttributes = Partial<SVGProps<SVGSVGElement>>\n\nexport interface LucideProps extends SVGAttributes {\n  size?: string | number\n}\n/**\n * Converts string to KebabCase\n * Copied from scripts/helper. If anyone knows how to properly import it here\n * then please fix it.\n *\n * @param {string} string\n * @returns {string} A kebabized string\n */\nexport const toKebabCase = (string: string) => string.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n\nconst createLucideIcon = (iconName: string, iconNode: IconNode) => {\n  const Component = forwardRef<SVGSVGElement, LucideProps>(\n    ({ color = 'currentColor', size = 24, strokeWidth = 2, children, ...rest }, ref) =>\n      createElement(\n        'svg',\n        {\n          ref,\n          ...defaultAttributes,\n          width: size,\n          height: size,\n          stroke: color,\n          strokeWidth,\n          className: `lucide lucide-${toKebabCase(iconName)}`,\n          ...rest,\n        },\n        [\n          ...iconNode.map(([tag, attrs]) => createElement(tag, attrs)),\n          ...(\n            (Array.isArray(children) ? children : [children]) || []\n          )\n        ],\n      ),\n  );\n\n  Component.displayName = `${iconName}`;\n\n  return Component;\n};\n\nexport default createLucideIcon\n"],"mappings":";;;;;;AAkBa,MAAAA,WAAA,GAAeC,MAAmB,IAAAA,MAAA,CAAOC,OAAA,CAAQ,oBAAsB,SAAO,EAAEC,WAAY;AAEnG,MAAAC,gBAAA,GAAmBA,CAACC,QAAA,EAAkBC,QAAuB;EACjE,MAAMC,SAAY,GAAAC,UAAA,CAChB,CAAAC,IAAA,EAA4EC,GAC1E;IAAA,IADD;MAAEC,KAAA,GAAQ,cAAgB;MAAAC,IAAA,GAAO,EAAI;MAAAC,WAAA,GAAc,CAAG;MAAAC,QAAA;MAAA,GAAaC;IAAK,IAAAN,IAAA;IAAA,OACvEO,aAAA,CACE,OACA;MACEN,GAAA;MACA,GAAGO,iBAAA;MACHC,KAAO,EAAAN,IAAA;MACPO,MAAQ,EAAAP,IAAA;MACRQ,MAAQ,EAAAT,KAAA;MACRE,WAAA;MACAQ,SAAA,EAAW,iBAAiBrB,WAAA,CAAYK,QAAQ;MAChD,GAAGU;IACL,GACA,CACE,GAAGT,QAAS,CAAAgB,GAAA,CAAIC,KAAA;MAAA,IAAC,CAACC,GAAK,EAAAC,KAAK,CAAM,GAAAF,KAAA;MAAA,OAAAP,aAAA,CAAcQ,GAAK,EAAAC,KAAK,CAAC;IAAA,IAC3D,KACGC,KAAA,CAAMC,OAAQ,CAAAb,QAAQ,IAAIA,QAAW,IAACA,QAAQ,MAAM,EAAC,EAG5D;EAAA,EACJ;EAEAP,SAAA,CAAUqB,WAAA,GAAc,GAAGvB,QAAA;EAEpB,OAAAE,SAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module"}